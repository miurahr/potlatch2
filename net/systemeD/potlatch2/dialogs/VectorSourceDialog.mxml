<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow
        xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:s="library://ns.adobe.com/flex/spark"
        layout="vertical" showCloseButton="true"
        horizontalAlign="center" title="Load vector file"
        width="630" height="450" verticalGap="0">

	<mx:DataGrid editable="true" width="100%" height="100%" id="dataGrid" 
		dataProvider="{vectorLayers}" itemEditEnd="dataEdited(event)">
	    <mx:columns>
	        <mx:DataGridColumn editable="false" dataField="visible" headerText="Show?" width="45">
				<mx:itemRenderer>
					<fx:Component>
						<mx:CheckBox selectedField="isSelected"
									 click="data.isSelected=!data.isSelected; this.parent.parent.dispatchEvent(new Event('visibility_changed'));" 
									 paddingLeft="5"/>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
	        <mx:DataGridColumn editable="false" dataField="interactive" headerText="Select?" width="45">
				<mx:itemRenderer>
					<!-- There should really be a way to hide this for the editable layer. See
					     http://stackoverflow.com/questions/6329895/how-do-i-change-the-style-of-one-individual-cell-in-a-flex-datagrid 
					     Leave it as a FIXME until we move to Flex 4 -->
					<fx:Component>
						<mx:CheckBox selectedField="isInteractive"
									 click="data.isInteractive=!data.isInteractive; this.parent.parent.dispatchEvent(new Event('interactive_changed'));" 
						             paddingLeft="5"/>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
	        <mx:DataGridColumn editable="true"  dataField="name"  headerText="Name"/>
	        <mx:DataGridColumn editable="false" dataField="url"   headerText="URL"/>
	        <mx:DataGridColumn editable="false" dataField="style" headerText="Style">
				<mx:itemRenderer>
					<fx:Component>
					<mx:ComboBox
							selectedItem="{outerDocument.whichStyle(data)}"
					        change="outerDocument.styleEdited(data.name,selectedItem.url)"
					        dataProvider="{outerDocument.styles}" 
							labelField="name" />
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
	    </mx:columns>
	</mx:DataGrid>
	<mx:HBox horizontalAlign="right" width="100%">
		<mx:LinkButton label="Delete" click="removeLayer()" enabled="{dataGrid.selectedItem != null &amp;&amp; dataGrid.selectedItem.isBackground}"/>
	</mx:HBox>

	<fx:Declarations>
		<s:RadioButtonGroup id="filetype" />
	</fx:Declarations>
	<s:Form id="addlayer" width="100%">
		<s:FormHeading label="Add new vector layer" />

		<s:FormItem label="File type:">
			<s:HGroup>
				<s:RadioButton groupName="filetype" value="gpx" id="gpx" label="GPX" selected="true" />
				<s:RadioButton groupName="filetype" value="kml" id="kml" label="KML" />
				<s:RadioButton groupName="filetype" value="osm" id="osm" label="OSM" />
				<s:RadioButton groupName="filetype" value="shp" id="shp" label="Shapefile" />
			</s:HGroup>
			<s:helpContent><s:Label text="Type of data to load"/></s:helpContent>
		</s:FormItem>

		<s:FormItem label="Projection:">
			<s:DropDownList id="projection" selectedIndex="0" width="200"> 
				<s:ArrayCollection>
					<fx:Object label="Lat/long (EPSG:4326)" data="" />
					<fx:Object label="Ordnance Survey GB" data="EPSG:27700" />
					<fx:Object label="NAD83" data="EPSG:4269" />
				</s:ArrayCollection>
			</s:DropDownList>
			<s:helpContent><s:Label text="Shapefiles only"/></s:helpContent>
		</s:FormItem>

		<s:FormItem label="Simplify:">
			<s:CheckBox label="Enabled" id="simplify" />
			<s:helpContent><s:Label text="Reduce points in paths"/></s:helpContent>
		</s:FormItem>

        <s:FormItem label="File:">
			<s:HGroup>
				<s:Button label="Open..." click="loadFileLocal()" />
				<s:Rect width="20" height="1" />
	            <s:TextInput id="src" text="" change="selectByExtension()" />
				<s:Button label="Fetch" click="loadFiles(src.text);" enabled="{src.text == '' ? false : true}"/>
			</s:HGroup>
            <s:helpContent><s:Label text="URL of file to load" /></s:helpContent>
        </s:FormItem>

        <s:FormItem label="Tag transform:">
			<s:HGroup>
				<s:Button label="Open..." click="loadTransformLocal()" />
				<s:Rect width="20" height="1" />
				<s:TextInput id="transformsrc" text="{CSSTransform.getInstance().url}"/>
				<s:Button label="Fetch" click="loadTransform(transformsrc.text);" enabled="{transformsrc.text == '' ? false : true}"/>
				<s:Button label="Clear" click="clearTransform();"                 enabled="{transformsrc.text == '' ? false : true}"/>
			</s:HGroup>
            <s:helpContent><s:Label text="MapCSS transformation file" /></s:helpContent>
        </s:FormItem>

	</s:Form>

  <fx:Script><![CDATA[

	import net.systemeD.halcyon.Map;
	import net.systemeD.halcyon.MapPaint;
	import net.systemeD.halcyon.Globals;
	import net.systemeD.halcyon.connection.Connection;
	import net.systemeD.halcyon.styleparser.CSSTransform;
	import net.systemeD.potlatch2.utils.*;
	import net.systemeD.potlatch2.collections.Stylesheets;
    import mx.managers.PopUpManager;
    import mx.events.DataGridEvent;
    import mx.events.CloseEvent;
    import mx.core.Application;
    import mx.core.FlexGlobals;
	import mx.collections.ArrayCollection;
	import mx.controls.Alert;

	private var map:Map;
	private var localFileReference:FileReference;

	public function styleEdited(name:String,stylesheet:String):void {
		map.findLayer(name).setStyle(stylesheet);
	}


    public function init():void {
        PopUpManager.addPopUp(this, Application(FlexGlobals.topLevelApplication), true);
        PopUpManager.centerPopUp(this);
        this.addEventListener(CloseEvent.CLOSE, vectorDialog_close);
		dataGrid.addEventListener("visibility_changed", toggleVisibility);
		dataGrid.addEventListener("interactive_changed", toggleInteractive);
		map = Globals.vars.root;
		dispatchEvent(new Event("layers_changed"));
    }

	public function whichStyle(item:Object):Object {
		for each (var style:Object in styles) {
			if (style.url==item.style) { return style; }
		}
		return {};
	}

	[Bindable(event="bogus")]
	public function get styles():ArrayCollection {
		return Stylesheets.instance().getFullCollection();
	}

	[Bindable(event="layers_changed")]
	private function get vectorLayers():Array {
        var v:Array=[];
        for each (var a:MapPaint in map.getLayers() ) {
            v.push( { name:a.connection.name, visible:a.visible, interactive:a.interactive, url:a.connection.apiBase, style:a.style, isBackground:a.isBackground } );
        }
		return v;
	}
	
	private function get selectedType():String {
		return filetype.selectedValue.toString();
	}
	
	private function toggleVisibility(event:Event):void {
		map.findLayer(dataGrid.selectedItem.name).visible = !map.findLayer(dataGrid.selectedItem.name).visible;
	}

	private function toggleInteractive(event:Event):void {
		map.findLayer(dataGrid.selectedItem.name).interactive = !map.findLayer(dataGrid.selectedItem.name).interactive;
	}
	
	private function dataEdited(event:DataGridEvent):void {
		if (event.dataField=='name') {
			// Rename field
			var a:String=dataGrid.selectedItem.name;
			var b:String=dataGrid.itemEditorInstance['text'];	// this is, unbelievably, how you get data within an itemEditEnd event
			if (a==b || map.findLayer(b)) {
				event.preventDefault();
			} else {
				map.findLayer(a).connection.name = b;
			}
			dispatchEvent(new Event("layers_changed"));
		}
	}

	private function removeLayer():void {
		map.removeLayerByName(dataGrid.selectedItem.name);
		dispatchEvent(new Event("layers_changed"));
	}
    
	private function selectByExtension():void {
		if      (src.text.match(/\.shp$/i)) filetype.selectedValue='shp'
		else if (src.text.match(/\.osm$/i)) filetype.selectedValue='osm'
		else if (src.text.match(/\.gpx$/i)) filetype.selectedValue='gpx'
		else if (src.text.match(/\.kml$/i)) filetype.selectedValue='kml'
	}

    private function vectorDialog_close(evt:CloseEvent):void {
        PopUpManager.removePopUp(this);
    }

	/** Launch importer for remotely hosted files. */
	private function loadFiles(url:String):void {
		var names:Array=url.split('/'); var name:String=names[names.length-1];
		var connection:Connection = new Connection(name, url, null, null, CSSTransform.getInstance());
		var importer:Importer = findImporter(connection);
		if (selectedType=='shp') {
			var re:RegExp=/.shp$/i; url=url.replace(re,'');
			importer.importFromRemoteFiles([url+".shp",url+".shx",url+".dbf"]);
		} else {
			importer.importFromRemoteFiles([url]);
		}
	}
	
	/** Present an 'Open File' dialogue. */
	private function loadFileLocal():void {
		// note scoping issues - http://blog.wrench.com.au/2010/06/16/filereferenceload-keep-it-in-scope/
		localFileReference=new FileReference(); 
		var fileTypes:String=selectedType=='shp' ? "*.zip" : ("*.zip;*."+selectedType);
		localFileReference.browse([new FileFilter(fileTypes,fileTypes)]); 
		localFileReference.addEventListener(Event.SELECT, selectFileLocal);
	}
	
	/** The user has chosen a file in the local 'Open File' dialogue. */
	private function selectFileLocal(event:Event):void {
		var connection:Connection = new Connection(localFileReference.name, '', null, null, CSSTransform.getInstance());
		var importer:Importer = findImporter(connection);
		importer.importFromLocalFile(localFileReference);
	}
	
	/** Create an Importer object of the type selected by the user. */
	private function findImporter(connection:Connection):Importer {
		var simplifyPath:Boolean=simplify.selected;
		var reproject:String=projection.selectedItem.data;
		var stylesheet:String="stylesheets/potlatch.css"; if (selectedType=='gpx') { stylesheet="stylesheets/gpx.css"; }

		switch (selectedType) {
			case 'gpx':	return new GpxImporter(connection, map, filesLoaded, simplifyPath, { stylesheet: stylesheet });
			case 'kml':	return new KmlImporter(connection, map, filesLoaded, simplifyPath, { stylesheet: stylesheet });
			case 'osm': return new OsmImporter(connection, map, filesLoaded, simplifyPath, { stylesheet: stylesheet });
			case 'shp': return new ShpImporter(connection, map, filesLoaded, simplifyPath, { stylesheet: stylesheet, projection: reproject });
		}
		return null;
	}
	
	/** Callback routine when import has completed. */
	private function filesLoaded(connection:Connection,options:Object,success:Boolean,message:String=null):void {
		if (success) {
			var paint:MapPaint = map.addLayer(connection, options['stylesheet']);
			paint.updateEntityUIs(false, false);
			dispatchEvent(new Event("layers_changed"));
		} else {
			Alert.show(message, 'Error', mx.controls.Alert.OK);
		}
	}
	
	/** Load CSS transformation file from remote URL. */
	private function loadTransform(url:String):void {
		CSSTransform.getInstance().loadFromUrl(url);
	}
	/** Load CSS transformation file from local disc. */
	private function loadTransformLocal():void {
		localFileReference=new FileReference(); 
		localFileReference.browse([new FileFilter("MapCSS file","*.css;*.mapcss")]); 
		localFileReference.addEventListener(Event.SELECT, selectTransformLocal);
	}
	private function selectTransformLocal(event:Event):void {
		localFileReference.addEventListener(Event.COMPLETE, transformFileLoaded);
		localFileReference.load();
	}
	private function transformFileLoaded(event:Event):void {
		CSSTransform.getInstance().loadFromUrl(event.target.data);
	}
	/** Cancel CSS transformation. */
	private function clearTransform():void {
		CSSTransform.getInstance().clear();
	}

              ]]>
  </fx:Script>
</mx:TitleWindow>
